name: Deploy to Linode

on:
  push:
    branches: [master]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Linode
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LINODE_HOST }}
          username: ${{ secrets.LINODE_USERNAME }}
          key: ${{ secrets.LINODE_SSH_KEY }}
          port: ${{ secrets.LINODE_PORT || 22 }}
          script: |
            # Project settings
            GH_TOKEN="${{ secrets.GH_PAT }}"
            GH_USER="kasundularaam"
            REPO_NAME="ceylon-handicraft-web-v10"
            REPO_URL="https://${GH_USER}:${GH_TOKEN}@github.com/${GH_USER}/${REPO_NAME}.git"
            PROJECT_PATH="/var/www/ceylon-handicraft-web-v10"
            VENV_PATH="$PROJECT_PATH/venv"  # Keep venv inside project directory
            SERVICE_NAME="ceylon-handicrafts"

            echo "Starting Ceylon Handicrafts deployment..."

            # Create project directory if it doesn't exist
            mkdir -p $PROJECT_PATH
            cd $PROJECT_PATH

            # Clean project directory and clone repository
            echo "Cleaning project directory..."
            rm -rf * .[^.]*

            echo "Cloning repository with authentication..."
            git clone $REPO_URL .
            if [ $? -ne 0 ]; then
              echo "Failed to clone repository!"
              exit 1
            fi

            # Create fresh virtual environment
            echo "Setting up Python virtual environment..."
            apt-get update && apt-get install -y python3-venv
            python3 -m venv $VENV_PATH

            # Activate virtual environment and install dependencies
            echo "Installing dependencies..."
            source $VENV_PATH/bin/activate
            pip install --upgrade pip
            pip install -r requirements.txt

            # Set up systemd service if it doesn't exist
            if [ ! -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
              echo "Setting up systemd service..."
              cat > /etc/systemd/system/$SERVICE_NAME.service << EOF
            [Unit]
            Description=Ceylon Handicrafts FastAPI service
            After=network.target

            [Service]
            User=root
            WorkingDirectory=$PROJECT_PATH
            ExecStart=$VENV_PATH/bin/python -m app.main
            Restart=always
            RestartSec=5

            [Install]
            WantedBy=multi-user.target
            EOF
              systemctl daemon-reload
              systemctl enable $SERVICE_NAME
            else
              # Update existing systemd service to use the correct path
              echo "Updating systemd service configuration..."
              sed -i "s|ExecStart=.*|ExecStart=$VENV_PATH/bin/python -m app.main|g" /etc/systemd/system/$SERVICE_NAME.service
              sed -i "s|WorkingDirectory=.*|WorkingDirectory=$PROJECT_PATH|g" /etc/systemd/system/$SERVICE_NAME.service
            fi

            # Check nginx config
            if [ ! -f "/etc/nginx/sites-available/ceylon-handicrafts" ]; then
              echo "Setting up Nginx configuration..."
              cat > /etc/nginx/sites-available/ceylon-handicrafts << EOF
            server {
                listen 80;
                server_name ceylonhandicraft.com www.ceylonhandicraft.com 172.104.165.223;
                
                location / {
                    proxy_pass http://127.0.0.1:8000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                }
            }
            EOF
              ln -sf /etc/nginx/sites-available/ceylon-handicrafts /etc/nginx/sites-enabled/
            fi

            # Reload systemd configuration
            systemctl daemon-reload

            # Restart the service
            echo "Restarting service..."
            systemctl restart $SERVICE_NAME

            # Reload nginx
            echo "Reloading Nginx..."
            systemctl reload nginx

            echo "Deployment completed successfully!"
